"""
Data Pizza - RAG Agent Example
Generated by datapizza-agent-creator skill

This example shows how to create a Retrieval-Augmented Generation (RAG)
agent using Datapizza AI framework with vector store integration.
"""

from datapizza.agents import Agent
from datapizza.clients.openai import OpenAIClient
from datapizza.tools import tool
from datapizza.tools.qdrant import QdrantTool
from datapizza.tools.web_fetch import WebFetchTool
import os
from typing import List, Dict, Any

# Initialize Qdrant vector store
vector_store = QdrantTool(
    collection_name="knowledge_base",
    embedding_model="text-embedding-ada-002",
    qdrant_url=os.getenv("QDRANT_URL", "http://localhost:6333"),
    qdrant_api_key=os.getenv("QDRANT_API_KEY")
)

# Initialize web fetch tool
web_fetch = WebFetchTool()

@tool
def search_knowledge_base(query: str, limit: int = 3) -> str:
    """Search the knowledge base for relevant information.

    Args:
        query: Search query to find relevant documents
        limit: Maximum number of documents to return

    Returns:
        Relevant knowledge base entries
    """
    try:
        if not query:
            return "Please provide a search query"

        # Search for similar documents
        results = vector_store.search(query, limit=limit)

        if not results:
            return "No relevant information found in the knowledge base"

        # Format results
        formatted_results = "Knowledge Base Results:\n\n"
        for i, result in enumerate(results, 1):
            formatted_results += f"{i}. {result['content']}\n"
            formatted_results += f"   Relevance Score: {result['score']:.3f}\n"
            formatted_results += f"   Source: {result.get('source', 'Unknown')}\n\n"

        return formatted_results

    except Exception as e:
        return f"Error searching knowledge base: {str(e)}"

@tool
def add_to_knowledge_base(content: str, source: str, category: str = "general") -> str:
    """Add new information to the knowledge base.

    Args:
        content: The content to add
        source: Source of the information
        category: Category for organization

    Returns:
        Confirmation message
    """
    try:
        if not content or not source:
            return "Both content and source are required"

        # Create metadata
        metadata = {
            "source": source,
            "category": category,
            "added_date": "2025-10-21",  # In production, use actual date
            "added_by": "rag_agent"
        }

        # Add to vector store
        vector_id = vector_store.add_document(content, metadata)

        return f"""
        Information added to knowledge base successfully!

        Document ID: {vector_id}
        Source: {source}
        Category: {category}
        Content Preview: {content[:100]}...

        The information is now searchable and available for future queries.
        """

    except Exception as e:
        return f"Error adding to knowledge base: {str(e)}"

@tool
def fetch_and_store_webpage(url: str, category: str = "web") -> str:
    """Fetch content from a webpage and store it in the knowledge base.

    Args:
        url: URL of the webpage to fetch
        category: Category for the stored content

    Returns:
        Result of the fetch and store operation
    """
    try:
        if not url:
            return "URL is required"

        # Fetch webpage content
        content = web_fetch.fetch(url)

        if not content:
            return f"Failed to fetch content from {url}"

        # Extract title (basic implementation)
        title = url.split("/")[-1].replace("-", " ").title()

        # Store in knowledge base
        result = add_to_knowledge_base(content, url, category)

        return f"""
        Webpage processed and stored successfully!

        URL: {url}
        Title: {title}
        Category: {category}
        Content Length: {len(content)} characters

        {result}
        """

    except Exception as e:
        return f"Error fetching and storing webpage: {str(e)}"

@tool
def get_knowledge_base_stats() -> str:
    """Get statistics about the knowledge base.

    Returns:
        Knowledge base statistics
    """
    try:
        stats = vector_store.get_collection_stats()

        return f"""
        Knowledge Base Statistics:

        Total Documents: {stats.get('document_count', 0)}
        Collection Size: {stats.get('collection_size', 'Unknown')}
        Categories: {stats.get('categories', [])}
        Last Updated: {stats.get('last_updated', 'Unknown')}

        The knowledge base is ready for searching and learning!
        """

    except Exception as e:
        return f"Error retrieving knowledge base stats: {str(e)}"

# Initialize OpenAI client
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY environment variable not set")

client = OpenAIClient(api_key=api_key, model="gpt-4o-mini")

# Create RAG agent
rag_agent = Agent(
    name="knowledge_assistant",
    system_prompt="""You are an intelligent knowledge assistant with access to a comprehensive knowledge base.

    Your capabilities include:
    - Searching the knowledge base for relevant information
    - Adding new information to the knowledge base
    - Fetching and storing web content
    - Providing context-aware answers

    When answering questions:
    1. First search the knowledge base for relevant information
    2. Use the retrieved context to inform your answer
    3. Always cite your sources when using knowledge base information
    4. If information is not found, offer to search the web and add it
    5. Provide clear, accurate, and helpful responses

    Guidelines:
    - Always base your answers on the retrieved context when available
    - Acknowledge when information might be incomplete or outdated
    - Offer to update the knowledge base with new information
    - Be transparent about your knowledge limitations
    - Encourage users to contribute to the knowledge base

    Remember: You're not just answering questions - you're helping build a comprehensive knowledge resource.""",
    client=client,
    tools=[search_knowledge_base, add_to_knowledge_base, fetch_and_store_webpage, get_knowledge_base_stats]
)

# Example usage
if __name__ == "__main__":
    print("=== RAG Agent Demo ===\n")

    # Initialize knowledge base with some sample data
    print("Initializing knowledge base with sample data...")
    init_result = rag_agent.run(
        "Add this information to the knowledge base: "
        "Datapizza AI is a Python framework for building production-ready AI agents. "
        "It supports multiple AI providers including OpenAI, Anthropic, Google, and Mistral. "
        "Source: https://github.com/datapizza-labs/datapizza-ai Category: framework"
    )
    print(init_result)
    print("\n" + "="*50 + "\n")

    # Scenario 1: Answering questions with knowledge base
    print("Scenario 1: Answering questions using knowledge base")
    response = rag_agent.run("What is Datapizza AI and what providers does it support?")
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 2: Adding new information
    print("Scenario 2: Learning new information")
    response = rag_agent.run(
        "Please add this to the knowledge base: "
        "Data Pizza provides specialized skills for Claude Code to accelerate development with Datapizza AI framework. "
        "It includes agent creator and tool builder skills. "
        "Source: https://github.com/inferis995/data-pizza Category: tools"
    )
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 3: Web content integration
    print("Scenario 3: Fetching and storing web content")
    response = rag_agent.run(
        "Fetch information from https://github.com/datapizza-labs/datapizza-ai and store it in the knowledge base"
    )
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 4: Knowledge base statistics
    print("Scenario 4: Knowledge base statistics")
    response = rag_agent.run("Show me the current knowledge base statistics")
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 5: Complex query requiring context
    print("Scenario 5: Complex query with context")
    response = rag_agent.run(
        "What tools are available for working with Datapizza AI and Data Pizza? "
        "How do they complement each other?"
    )
    print(response)