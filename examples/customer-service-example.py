"""
Data Pizza - Customer Service Agent Example
Generated by datapizza-agent-creator skill

This example shows how to create a customer service agent
using Datapizza AI framework with custom tools.
"""

from datapizza.agents import Agent
from datapizza.clients.openai import OpenAIClient
from datapizza.tools import tool
from datapizza.tools.SQLDatabase import SQLDatabase
import os

# Database setup
db = SQLDatabase(db_uri="sqlite:///customer_data.db")

# Custom tools for customer service
@tool
def get_customer_info(customer_id: str) -> str:
    """Get customer information from database.

    Args:
        customer_id: The ID of the customer to retrieve

    Returns:
        Formatted customer information as string
    """
    try:
        if not customer_id:
            return "Customer ID is required"

        query = f"SELECT * FROM customers WHERE id = {customer_id}"
        result = db.run_sql_query(query)

        if not result:
            return f"Customer with ID {customer_id} not found"

        customer = result[0]
        return f"""
        Customer Information:
        ID: {customer['id']}
        Name: {customer['name']}
        Email: {customer['email']}
        Phone: {customer['phone']}
        Status: {customer['status']}
        Registration Date: {customer['created_at']}
        """

    except Exception as e:
        return f"Error retrieving customer data: {str(e)}"

@tool
def update_customer_status(customer_id: str, status: str) -> str:
    """Update customer status in database.

    Args:
        customer_id: The ID of the customer
        status: New status value

    Returns:
        Confirmation message
    """
    try:
        valid_statuses = ['active', 'inactive', 'pending', 'suspended', 'vip']
        if status.lower() not in valid_statuses:
            return f"Invalid status. Valid options: {', '.join(valid_statuses)}"

        query = f"UPDATE customers SET status = '{status}' WHERE id = {customer_id}"
        db.run_sql_query(query)

        return f"Customer {customer_id} status updated to '{status}' successfully"

    except Exception as e:
        return f"Error updating customer status: {str(e)}"

@tool
def get_customer_orders(customer_id: str, limit: int = 5) -> str:
    """Get recent customer orders.

    Args:
        customer_id: The ID of the customer
        limit: Maximum number of orders to return

    Returns:
        Formatted order information
    """
    try:
        query = f"""
        SELECT o.id, o.order_date, o.total_amount, o.status,
               COUNT(oi.id) as item_count
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.customer_id = {customer_id}
        GROUP BY o.id
        ORDER BY o.order_date DESC
        LIMIT {limit}
        """

        orders = db.run_sql_query(query)

        if not orders:
            return f"No orders found for customer {customer_id}"

        result = f"Recent Orders for Customer {customer_id}:\n\n"
        for order in orders:
            result += f"Order #{order['id']} - {order['order_date']}\n"
            result += f"  Total: ${order['total_amount']:.2f}\n"
            result += f"  Items: {order['item_count']}\n"
            result += f"  Status: {order['status']}\n\n"

        return result

    except Exception as e:
        return f"Error retrieving customer orders: {str(e)}"

@tool
def create_support_ticket(customer_id: str, issue_type: str, description: str) -> str:
    """Create a new support ticket.

    Args:
        customer_id: The ID of the customer
        issue_type: Type of issue (billing, technical, general)
        description: Description of the issue

    Returns:
        Ticket creation confirmation
    """
    try:
        ticket_id = f"TKT{customer_id}{len(description)}"

        # In a real implementation, this would insert into a database
        # For demo purposes, we'll simulate ticket creation

        return f"""
        Support Ticket Created Successfully!

        Ticket ID: {ticket_id}
        Customer ID: {customer_id}
        Issue Type: {issue_type}
        Description: {description}
        Status: Open
        Created: Just now

        Our team will respond within 24 hours.
        """

    except Exception as e:
        return f"Error creating support ticket: {str(e)}"

# Initialize OpenAI client
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY environment variable not set")

client = OpenAIClient(api_key=api_key, model="gpt-4o-mini")

# Create customer service agent
customer_service_agent = Agent(
    name="customer_service",
    system_prompt="""You are a helpful and professional customer service assistant for an e-commerce company.

    Your capabilities include:
    - Looking up customer information
    - Updating customer status
    - Checking recent orders
    - Creating support tickets

    Always be polite, empathetic, and helpful. If you don't have access to certain information,
    be honest about it and suggest alternatives. Never make up customer data or order details.

    When handling customer issues:
    1. Listen carefully to their concern
    2. Look up their information if needed
    3. Provide clear, helpful solutions
    4. Offer to create support tickets for complex issues
    5. Follow up to ensure resolution

    Remember to protect customer privacy and only share information that's relevant to their inquiry.""",
    client=client,
    tools=[get_customer_info, update_customer_status, get_customer_orders, create_support_ticket]
)

# Example usage
if __name__ == "__main__":
    # Test the agent with sample customer service scenarios
    print("=== Customer Service Agent Demo ===\n")

    # Scenario 1: Customer asking about their order
    print("Scenario 1: Customer asking about recent orders")
    response = customer_service_agent.run("Hi, I'm customer 12345 and I'd like to check my recent orders.")
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 2: Customer with technical issue
    print("Scenario 2: Customer reporting technical issue")
    response = customer_service_agent.run(
        "I'm having trouble logging into my account. My customer ID is 67890. "
        "Can you help me and create a support ticket?"
    )
    print(response)
    print("\n" + "="*50 + "\n")

    # Scenario 3: Update customer status
    print("Scenario 3: Request to update customer status")
    response = customer_service_agent.run(
        "Please update customer 54321 to VIP status. They've been a loyal customer for years."
    )
    print(response)